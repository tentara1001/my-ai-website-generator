import { WebsiteTemplate } from '../types';

export async function generateWebsiteTemplates(userPrompt: string): Promise<WebsiteTemplate[]> {
    // This endpoint corresponds to the serverless function.
    const endpoint = '/.netlify/functions/generate';

    try {
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ prompt: userPrompt }),
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ error: 'Failed to parse error response from server.' }));
            // Provide a more detailed error message from the server if available
            throw new Error(`Request failed: ${errorData.error || response.statusText}`);
        }

        const templates: WebsiteTemplate[] = await response.json();
        
        if (!Array.isArray(templates)) {
            // This validation is useful in case the server returns an unexpected format
            throw new Error("The server returned an unexpected data format.");
        }
        
        return templates;

    } catch (error) {
        console.error("Error fetching from serverless function:", error);
        if (error instanceof Error) {
            // Re-throw a user-friendly error message for the UI
            throw new Error(`Failed to generate templates. ${error.message}`);
        }
        // Fallback for unknown error types
        throw new Error("An unknown error occurred while communicating with the server.");
    }
}