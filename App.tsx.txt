import React, { useState, useCallback } from 'react';
import { WebsiteTemplate } from './types';
import { generateWebsiteTemplates } from './services/geminiService';
import TemplateCard from './components/TemplateCard';
import Loader from './components/Loader';

const SparklesIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className={className}>
        <path fillRule="evenodd" d="M9.315 7.584C12.195 3.883 16.695 1.5 21.75 1.5a.75.75 0 01.75.75c0 5.056-2.383 9.555-6.084 12.436A6.75 6.75 0 019.75 22.5a.75.75 0 01-.75-.75v-4.131A15.838 15.838 0 016.382 15H2.25a.75.75 0 01-.75-.75 6.75 6.75 0 017.815-6.666zM15 6.75a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5z" clipRule="evenodd" />
        <path d="M5.26 17.242a.75.75 0 10-1.06-1.06 7.5 7.5 0 00-1.964 5.304a.75.75 0 00.75.75h3a.75.75 0 00.75-.75 7.5 7.5 0 00-1.964-5.304z" />
    </svg>
);

const App: React.FC = () => {
    const [prompt, setPrompt] = useState<string>('');
    const [templates, setTemplates] = useState<WebsiteTemplate[]>([]);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    const examplePrompts = [
        "A portfolio for a freelance photographer specializing in landscapes.",
        "An e-commerce store for handmade artisanal soap.",
        "A modern website for a new tech startup.",
        "A cozy, welcoming blog for a home cook sharing recipes.",
    ];

    const handleGenerate = useCallback(async () => {
        if (!prompt.trim() || isLoading) return;

        setIsLoading(true);
        setError(null);
        setTemplates([]);

        try {
            const result = await generateWebsiteTemplates(prompt);
            setTemplates(result);
        } catch (e: unknown) {
            if (e instanceof Error) {
                setError(`Error: ${e.message}. Please ensure the API Key is correctly configured in your hosting provider (e.g., Netlify).`);
            } else {
                setError("An unknown error occurred.");
            }
        } finally {
            setIsLoading(false);
        }
    }, [prompt, isLoading]);

    const handlePromptChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        setPrompt(e.target.value);
    };
    
    const handleExampleClick = (example: string) => {
        setPrompt(example);
    }

    return (
        <div className="min-h-screen bg-gray-900 text-white p-4 sm:p-6 lg:p-8">
            <div className="absolute top-0 left-0 w-full h-full bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))] -z-0"></div>
            <div className="max-w-5xl mx-auto relative z-10">
                <header className="text-center my-12">
                     <h1 className="text-4xl sm:text-5xl lg:text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-violet-600">
                        Instant Site AI
                    </h1>
                    <p className="mt-4 text-lg text-gray-400 max-w-2xl mx-auto">
                        Describe your ideal website, and let AI craft beautiful, ready-to-use template ideas for you.
                    </p>
                </header>

                <main>
                    <div className="bg-gray-800/50 backdrop-blur-md p-6 rounded-2xl border border-gray-700/60 shadow-lg">
                        <div className="space-y-4">
                            <label htmlFor="prompt-input" className="block text-lg font-semibold text-gray-200">
                                What kind of website do you want to build?
                            </label>
                            <textarea
                                id="prompt-input"
                                value={prompt}
                                onChange={handlePromptChange}
                                placeholder="e.g., A minimalist blog for a travel writer"
                                className="w-full h-28 p-4 bg-gray-900/70 border border-gray-600 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-violet-500 transition-colors duration-200 text-gray-100 placeholder-gray-500"
                                disabled={isLoading}
                            />
                            <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
                                <div className="text-sm text-gray-500">
                                    <span className="font-semibold">Or try an example:</span>
                                    <button onClick={() => handleExampleClick(examplePrompts[Math.floor(Math.random() * examplePrompts.length)])} className="ml-2 text-violet-400 hover:text-violet-300 transition-colors" disabled={isLoading}>
                                        I'm feeling lucky
                                    </button>
                                </div>
                                <button
                                    onClick={handleGenerate}
                                    disabled={isLoading || !prompt.trim()}
                                    className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-violet-600 rounded-lg hover:bg-violet-700 disabled:bg-gray-600 disabled:cursor-not-allowed transition-all duration-300 transform active:scale-95 shadow-lg shadow-violet-600/20"
                                >
                                    {isLoading ? 'Generating...' : 'Generate Ideas'}
                                    {!isLoading && <SparklesIcon className="w-5 h-5"/>}
                                </button>
                            </div>
                        </div>
                    </div>

                    <div className="mt-12">
                        {isLoading && <Loader />}
                        {error && (
                            <div className="bg-red-900/50 border border-red-700 text-red-200 p-4 rounded-lg text-center">
                                {error}
                            </div>
                        )}
                        {!isLoading && templates.length > 0 && (
                             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                                {templates.map((template, index) => (
                                    <TemplateCard key={index} template={template} />
                                ))}
                            </div>
                        )}
                        {!isLoading && !error && templates.length === 0 && (
                            <div className="text-center py-16 px-6 bg-gray-800/30 rounded-2xl border border-dashed border-gray-700">
                                <h3 className="text-xl font-medium text-gray-300">Your ideas will appear here</h3>
                                <p className="mt-2 text-gray-500">Enter a description above to get started.</p>
                            </div>
                        )}
                    </div>
                </main>
                
                <footer className="text-center mt-16 pb-8 text-gray-600 text-sm">
                    <p>Powered by Google Gemini. Designed for inspiration.</p>
                </footer>
            </div>
        </div>
    );
};

export default App;